<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org/DTD Config 3.0//EN"
	"http://mybatis.org/dtd/mybatis-3-mapper.dtd">

<mapper namespace="orderMapper">

	<!-- 1. 장바구니에 추가하기 담기를 누를때 상품번호/id 있으면 update 없으면 insert -->
	<insert id="cartInsert">
		MERGE INTO CART
		USING DUAL
		ON
		(product_no =
		#{product_no}
		AND id = #{id})

		WHEN MATCHED THEN
		UPDATE
		SET cart_qty = cart_qty + #{cart_qty}
		WHERE
		product_no = #{product_no}
		AND id = #{id}
		WHEN NOT MATCHED THEN
		INSERT
		(cart_no, id, product_no, cart_qty)
		VALUES(cart_seq.NEXTVAL, #{id},
		#{product_no}, #{cart_qty})
	</insert>


	<!-- 2. 목록보기 -->
	<select id="cartList" resultType="Cart">
		SELECT
		c.cart_no ,
		c.id ,
		p.product_no ,
		
		m.name ,
		m.email,
		m.tel,
		m.point,
		
		p.product_name ,
		p.product_image,
		c.cart_qty ,
		p.product_price,
		(product_price * cart_qty) money
		FROM
		member m, product
		p, cart c
		WHERE
		m.id = c.id AND
		p.product_no = c.product_no AND
		c.id = #{id}
	</select>

	<!-- 3. 장바구니 상품별 삭제 -->
	<delete id="cartDelete">
		DELETE FROM cart
		WHERE cart_no = #{cart_no}
	</delete>



	<!-- <select id="sumMoney" resultType="int"> SELECT NVL(SUM(product_price 
		* cart_qty), 0) AS sumMoney FROM product p, cart c WHERE c.product_no = p.product_no 
		AND c.id = #{Id} </select> 7. 장바구니에 같은상품있으면 수량합산 <update id="cartUpdate"> 
		UPDATE cart SET cart_qty = cart_qty + #{cartQty} WHERE id = #{Id} AND product_no 
		= #{productNo} </update> -->
	<!-- 3. 장바구니 수정 (수량 덮어쓰기) <update id="cartModify"> UPDATE cart SET cart_qty 
		= #{cartQty} WHERE id = #{Id} AND product_no = #{productNo} </update> 6. 
		장바구니 동일상품 확인 <select id="cartCount" resultType="int"> SELECT count(*) FROM 
		cart WHERE product_no = #{productNo} AND id = #{Id} </select> 7. 장바구니에 같은상품있으면 
		수량합산 <update id="cartUpdate"> UPDATE cart SET cart_qty = cart_qty + #{cartQty} 
		WHERE id = #{Id} AND product_no = #{productNo} </update> -->












	<!-- ADMIN -->
	<select id="countOrder" resultType="int">
		SELECT count(*) from orders
	</select>
	
	<select id="countCancel" resultType="int">
		SELECT count(*) from orders WHERE ORDERS_STATUS = '주문취소'
	</select>
	
	<select id="getFullInfo" resultType="Orders">
		SELECT orders_no AS ordersNo, id, orders_date AS ordersDate, cart_no AS cartNo, orders_status AS ordersStatus, orders_total AS ordersTotal 
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM orders 
						ORDER BY orders_no DESC) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<select id="getOrderInfo" resultType="Orders">
		SELECT orders_no AS ordersNo, orders_date AS ordersDate, orders_status AS ordersStatus, orders_total AS ordersTotal FROM orders WHERE orders_no = #{orderNo}
	</select>
	
	<update id="changeStatus" parameterType="Hashmap">
		<if test="status == '주문완료'">
			UPDATE orders SET orders_status = '배송중' WHERE orders_no = #{orderNo}
		</if>
		<if test="status == '배송중'">
			UPDATE orders SET orders_status = '배송완료' WHERE orders_no = #{orderNo}
		</if>
	</update>

	<select id="getCancelInfo" resultType="Orders">
		SELECT orders_no AS ordersNo, id, orders_date AS ordersDate, cart_no AS cartNo, orders_status AS ordersStatus, orders_total AS ordersTotal 
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM orders
						WHERE orders_status = '주문취소'
						ORDER BY orders_no DESC) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	<select id="memberOrderlist" parameterType="String" resultType="Orders">
		SELECT orders_no AS ordersNo, orders_date AS ordersDate, orders_status AS ordersStatus, orders_total AS ordersTotal
			FROM orders WHERE id = #{id}
	</select>
	
	<select id="memberSum" resultType="int">
		SELECT NVL(SUM(orders_total), 0) FROM orders WHERE id = #{id}
	</select>
	<select id="memberLastest" resultType="Date">
		SELECT MAX(orders_date) FROM orders WHERE id = #{id}
	</select>
	
	<select id="countRefund" resultType="int">
		SELECT count(*) from refund
	</select>
	
	<select id="getRefundInfo" resultType="Refund">
		SELECT orders_no AS ordersNo, product_no AS productNo, id, refund_qty AS refundQty, refund_date AS refundDate, refund_status AS refundStatus, refund_reason AS refundReason 
		FROM (
			SELECT ROWNUM RN, A.* 
				FROM (
						SELECT * 
						FROM refund
						ORDER BY refund_date DESC) A
				)
		WHERE RN BETWEEN #{start} AND #{end}
	</select>
	
	<update id="refundStatus" parameterType="Hashmap">
		<if test="status == '반품신청'">
			UPDATE refund SET refund_status = '처리중' WHERE orders_no = #{orderNo} AND product_no = #{productNo}
		</if>
		<if test="status == '처리중'">
			UPDATE refund SET refund_status = '반품완료' WHERE orders_no = #{orderNo} AND product_no = #{productNo}
		</if>
	</update>


</mapper>